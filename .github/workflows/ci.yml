name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # 🧪 测试阶段
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: npm run lint --if-present
      
    - name: 🧪 Run tests
      run: npm run test
      
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 🏗️ 构建阶段
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build project
      run: npm run build
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  # 🔒 安全检查
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run security audit
      run: npm audit --audit-level high
      
    - name: 🔒 Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # 📏 代码质量
  quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🚢 部署到测试环境 (仅开发分支)
  deploy-staging:
    name: 🚢 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.class-management.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/
        
    - name: 🚢 Deploy to staging
      run: |
        echo "🚢 Deploying to staging environment..."
        # 这里添加实际的部署脚本
        echo "✅ Staging deployment completed!"

  # 🌟 部署到生产环境 (仅主分支)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://class-management.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/
        
    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        # 这里添加实际的部署脚本
        echo "✅ Production deployment completed!"

  # 📱 通知
  notify:
    name: 📱 Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📱 Send notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow